module Foo

import Foo.Bar
import Plutus.V1 (PlutusData, Address, AssetClass, Bytes, Credential, CurrencySymbol, Datum, DatumHash, Extended, Interval, LowerBound, Map, POSIXTime, POSIXTimeRange, PlutusData, PubKeyHash, Redeemer, RedeemerHash, ScriptHash, StakingCredential, TokenName, TxId, TxOutRef, UpperBound, Value)
import Plutus.V2 (OutputDatum, TxInInfo, TxOut)
import Prelude (Eq, Json, Maybe, Either, List, Integer)

prod A = (FooSum Address Value Datum)

derive Eq A
derive Json A
derive PlutusData A

prod B = (FooProd Address Value Datum)

derive Eq B
derive Json B
derive PlutusData B

prod C = (FooRec Address Value Datum)

derive Eq C
derive Json C
derive PlutusData C

prod D = (FooComplicated Address Value Datum)

derive Eq D
derive Json D
derive PlutusData D

prod E a b = Address
     AssetClass
     Bytes
     Credential
     CurrencySymbol
     Datum
     DatumHash
     (Extended POSIXTime)
     (Interval POSIXTime)
     (LowerBound POSIXTime)
     -- (Map Bytes Credential) TODO: PlutusTx.Eq instances from AssocMap were removed from plutus-tx
     POSIXTime
     POSIXTimeRange
     PlutusData
     PubKeyHash
     Redeemer
     RedeemerHash
     ScriptHash
     StakingCredential
     TokenName
     TxId
     TxOutRef
     (UpperBound POSIXTime)
     Value
     OutputDatum
     TxInInfo
     TxOut
     (Maybe a)
     (Either a b)
     (List b)

derive Eq (E a b)
derive Json (E a b)
derive PlutusData (E a b)

prod FInt = (F Integer)

derive Eq FInt
derive Json FInt
derive PlutusData FInt

prod GInt = (G Integer)

derive Eq GInt
derive Json GInt
derive PlutusData GInt
