module Foo

import Foo.Bar
import Plutus.V1 (PlutusData, Address, AssetClass, Bytes, Credential, CurrencySymbol, Datum, DatumHash, Extended, Interval, LowerBound, Map, POSIXTime, POSIXTimeRange, PlutusData, PubKeyHash, Redeemer, RedeemerHash, ScriptHash, StakingCredential, TokenName, TxId, TxOutRef, UpperBound, Value)
import Plutus.V2 (OutputDatum, TxInInfo, TxOut)
import Prelude (Eq, Json)

prod A = (FooSum Address Value Datum)

derive Eq A
derive Json A
derive PlutusData A

prod B = (FooProd Address Value Datum)

derive Eq B
derive Json B
derive PlutusData B

prod C = (FooRec Address Value Datum)

derive Eq C
derive Json C
derive PlutusData C

prod D = (FooComplicated Address Value Datum)

derive Eq D
derive Json D
derive PlutusData D

prod E = Address AssetClass Bytes Credential CurrencySymbol Datum DatumHash (Extended POSIXTime) (Interval POSIXTime) (LowerBound POSIXTime) (Map Bytes Credential) POSIXTime POSIXTimeRange PlutusData PubKeyHash Redeemer RedeemerHash ScriptHash StakingCredential TokenName TxId TxOutRef (UpperBound POSIXTime) Value OutputDatum TxInInfo TxOut

derive Eq E
derive Json E
derive PlutusData E
