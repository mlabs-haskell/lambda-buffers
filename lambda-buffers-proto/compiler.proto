syntax = "proto3";

package lambdabuffers.compiler;

import "lambdabuffers.proto";

/* Compiler Input

Compiler Input is a fully self contained list of modules, the entire
compilation closure needed by the Compiler to perform its task.
*/
message CompilerInput {
  // Modules to compile.
  // Duplicate modules MUST be reported with
  // `ProtoParseError.MultipleModuleError`.
  repeated Module modules = 1;
}

// Errors internal to the implementation.
message InternalError {
  // Error message.
  string msg = 1;
  // Source information if meaningful.
  SourceInfo source_info = 2;
}

// All errors that occur because of Google Protocol Buffer's inability to
// enforce certain invariants.
// Some of invariance:
// - using Proto `map` restricts users to `string` keys which impacts
//   API documentation, which is why `repeated` fields are used throughout,
// - using Proto 'oneof' means users have to check if such a field is
//   set or report an error otherwise.
message ProtoParseError {
  // Multiple Modules with the same ModuleName were found.
  message MultipleModuleError {
    // Conflicting type definitions.
    repeated Module modules = 2;
  }

  // Multiple TyDefs with the same TyName were found in ModuleName.
  message MultipleTyDefError {
    // Module in which the error was found.
    ModuleName module_name = 1;
    // Conflicting type definitions.
    repeated TyDef ty_defs = 2;
  }

  // Multiple ClassDefs with the same ClassName were found in ModuleName.
  message MultipleClassDefError {
    // Module in which the error was found.
    ModuleName module_name = 1;
    // Conflicting class definitions.
    repeated ClassDef class_defs = 2;
  }

  // Multiple TyArgs with the same ArgName were found in ModuleName.TyDef.
  message MultipleTyArgError {
    // Module in which the error was found.
    ModuleName module_name = 1;
    // Type definition in which the error was found.
    TyDef ty_def = 2;
    // Conflicting type abstraction arguments.
    repeated TyArg ty_args = 3;
  }

  // Multiple Sum Constructors with the same ConstrName were found in
  // ModuleName.TyDef.
  message MultipleConstructorError {
    // Module in which the error was found.
    ModuleName module_name = 1;
    // Type definition in which the error was found.
    TyDef ty_def = 2;
    // Conflicting constructors.
    repeated Sum.Constructor constructors = 3;
  }

  // Multiple Record Fields with the same FieldName were found in
  // ModuleName.TyDef.
  message MultipleFieldError {
    // Module in which the error was found.
    ModuleName module_name = 1;
    // Type definition in which the error was found.
    TyDef ty_def = 2;
    // Conflicting record fields.
    repeated Record.Field fields = 3;
  }

  message MultipleImportError {
    // Module in which the error was found.
    ModuleName module_name = 1;
    // Conflicting module imports.
    repeated ModuleName imports = 2;
  }

  // Proto `oneof` field is not set.
  message OneOfNotSetError {
    // Proto message name in which the `oneof` field is not set.
    string message_name = 1;
    // The `oneof` field that is not set.
    string field_name = 2;
  }

  // Proto `enum` field is unknown.
  message UnknownEnumError {
    // Proto `enum` name.
    string enum_name = 1;
    // The unknown tag for the `enum`.
    string got_tag = 2;
  }

  oneof proto_parse_error {
    MultipleModuleError multiple_module_error = 1;
    MultipleTyDefError multiple_tydef_error = 2;
    MultipleClassDefError multiple_classdef_error = 3;
    MultipleTyArgError multiple_tyarg_error = 4;
    MultipleConstructorError multiple_constructor_error = 5;
    MultipleFieldError multiple_field_error = 6;
    MultipleImportError multiple_import_error = 7;
    OneOfNotSetError one_of_not_set_error = 8;
    UnknownEnumError unknown_enum_error = 9;
  }
}

// Kind checking errors.
message KindCheckError {

  // Unbound variable ty_var detected in term ty_def.
  message UnboundTyVarError {
    ModuleName module_name = 1;
    TyDef ty_def = 2;
    TyVar ty_var = 3;
  }

  // Unbound type reference ty_ref detected in term ty_def.
  message UnboundTyRefError {
    ModuleName module_name = 1;
    TyDef ty_def = 2;
    TyRef ty_ref = 3;
  }

  // In ty_def an error has occurred when trying to unify kind ty_kind_lhs
  // with ty_kind_rhs.
  //
  // FIXME(cstml): Add source of constraint to the error such that user can see
  // where the constraint was generated - therefore where the error precisely
  // is.
  message UnificationError {
    ModuleName module_name = 1;
    TyDef ty_def = 2;
    Kind ty_kind_lhs = 3;
    Kind ty_kind_rhs = 4;
  }

  // A cyclic kind was encountered. Infinite kinds like this are not acceptable,
  // and we do not support them. We could not construct infinite kind in ty_def.
  //
  // As the implementation currently stands such an error is (most likely) not
  // representable - therefore not reachable. Such an error would usually occur
  // for a term like: λa. a a - in which case the inference would try to unify
  // two kinds of the form: m and m -> n - because m appears in both terms -
  // the cyclic unification error would be thrown.
  //
  // In the case of LambdaBuffers - such an error is not (currently) achievable
  // as the kind of the variable is given by the context - (i.e. λa : m . a a,
  // where m is a kind) therefore the unification would fail with Unification
  // Error. Nevertheless - future features might require it.
  message CyclicKindError {
    TyDef ty_def = 1;
    ModuleName module_name = 2;
  }

  // The actual_kind differs from the expected_kind.
  message InconsistentTypeError {
    ModuleName module_name = 1;
    TyDef ty_def = 2;
    Kind actual_kind = 3;
    Kind expected_kind = 4;
  }

  // One of the errors occurred during kind checking.
  oneof kind_check_error {
    UnboundTyRefError unbound_ty_ref_error = 1;
    UnboundTyVarError unbound_ty_var_error = 2;
    UnificationError unification_error = 3;
    CyclicKindError cyclic_kind_error = 4;
    InconsistentTypeError inconsistent_type_error = 5;
  }
}

/* Naming error message */
message NamingError {
  // One of naming errors.
  oneof naming_error {
    ModuleNamePart module_name_err = 1;
    TyName ty_name_err = 2;
    VarName var_name_err = 3;
    ConstrName constr_name_err = 4;
    FieldName field_name_err = 5;
    ClassName class_name_err = 6;
  }
}

// Type class checking errors.
message TyClassCheckError {

  // Unbound `class_ref` detected in `module_name`.
  message UnboundClassRefError {
    ModuleName module_name = 1;
    TyClassRef class_ref = 2;
  }

  // Superclass cycle `cycled_class_refs` was detected when checking a
  // class definition for `class_name` in module `module_name`.
  message SuperclassCycleError {
    ModuleName module_name = 1;
    ClassName class_name = 2;
    repeated TyClassRef cycled_class_refs = 3;
  }

  // Import `missing` wasn't found in `module_name`
  message ImportNotFoundError {
    ModuleName module_name = 1;
    ModuleName missing = 2;
  }

  // In `module_name` it wasn't possible to solve `constraint` because a
  // `sub_constraint` has been derived on an `Opaque` type. `Opaque` type can
  // only have an `InstanceClause` declared for them.
  message DeriveOpaqueError {
    ModuleName module_name = 1;
    Constraint constraint = 2;
    Constraint sub_constraint = 3;
  }

  // In `module_name` while trying to solve `constraint` it wasn't possible to
  // find a rule (`Derive` or `InstanceClause`) for `sub_constraint`.
  message MissingRuleError {
    ModuleName module_name = 1;
    Constraint constraint = 2;
    Constraint sub_constraint = 3;
  }

  // In `module_name` while trying to solve `constraint` `overlaps` (`Derive`
  // or `InstanceClause`) were found that could be used to solve the
  // `sub_constraint`.
  message OverlappingRulesError {
    ModuleName module_name = 1;
    Constraint constraint = 2;
    Constraint sub_constraint = 3;
    // NOTE(bladyjoker): This should rather be oneof `Derive` and
    // `InstanceClause`.
    message QHead {
      ModuleName module_name = 1;
      Constraint head = 2;
    }
    repeated QHead overlaps = 4;
  }

  // One of the errors occurred during type class checking.
  oneof tyclass_check_error {
    UnboundClassRefError unbound_class_ref_err = 1;
    SuperclassCycleError superclass_cycle_err = 2;
    ImportNotFoundError import_not_found_err = 3;
    DeriveOpaqueError derive_opaque_err = 4;
    MissingRuleError missing_rule_err = 5;
    OverlappingRulesError overlapping_rules_err = 6;
  }
}

// Compiler Error
message CompilerError {
  // Errors occurred during proto parsing.
  repeated ProtoParseError proto_parse_errors = 1;
  // Errors occurred during naming checking.
  repeated NamingError naming_errors = 2;
  // Errors occurred during kind checking.
  repeated KindCheckError kind_check_errors = 4;
  // Errors occurred during type class checking.
  repeated TyClassCheckError ty_class_check_errors = 5;
  // Errors internal to the compiler implementation.
  repeated InternalError internal_errors = 6;
}

// Compiler Result ~ a successful Compilation Output.
message CompilerResult {
}

// Output of the Compiler.
message CompilerOutput {
  oneof compiler_output {
    CompilerError compiler_error = 1;
    CompilerResult compiler_result = 2;
  }
}
