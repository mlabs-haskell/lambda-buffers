module LambdaBuffers

import Prelude

sum Kind = KindType | KindArrowKindKind

sum Ty = TyAppTyTy | TyVarVarName | TyRef

record TyAbs = { args : (List TyArg), body : TyBody }

record TyArg = { name : VarName, kind : Kind }

record TyDef = { name : TyName, abs : TyAbs }

sum TyBody = Opaque | Sum (Map ConstrName Constructor)

record Constructor = { name : ConstrName, product : Product }

prod Product = (List Ty)

prod Record = (Map FieldName Field)

record Field = { name : FieldName, ty : Ty }

sum TyRef = LocalTyRefTyName | ForeignTyRefModuleNameTyName

record ClassDef = { name : ClassName
                  , args : (List TyArg)
                  , supers : (List ClassConstraint) }

record ClassConstraint = { class : ClassRef, args : (List TyArg) }

record InstanceClause = { head : Constraint, body : (List Constraint) }

prod Derive = Constraint

record Constraint = { class : ClassRef, args : (List Ty) }

sum ClassRef = LocalClassRefClassName | ForeignClassRefModuleNameClassName

record Module = { name : ModuleName
                , tyDefs : (Map TyName TyDef)
                , classDefs : (Map ClassName ClassDef)
                , ruleImports : (Set ModuleName)
                , instanceClauses : (List InstanceClause)
                , derives : (List Derive) }

record CompilerInput = { modules : (Map ModuleName Module) }

prod TyName = Text

prod VarName = Text

prod ConstrName = Text

prod FieldName = Text

prod ModuleName = (List ModuleNamePart)

prod ModuleNamePart = Text

prod ClassName = Text