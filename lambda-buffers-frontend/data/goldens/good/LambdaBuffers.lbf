module LambdaBuffers

import Prelude

sum Kind = Type | Arrow Kind Kind

sum Ty = App Ty Ty | Var VarName | Ref TyRef

record TyAbs = { args : List TyArg, body : TyBody }

record TyArg = { name : VarName, kind : Kind }

record TyDef = { name : TyName, abs : TyAbs }

sum TyBody = Opaque | Sum (Map ConstrName Constructor)

record Constructor = { name : ConstrName, product : Product }

prod Product = (List Ty)

prod Record = (Map FieldName Field)

record Field = { name : FieldName, ty : Ty }

sum TyRef = Local TyName | Foreign ModuleName TyName

record ClassDef = { name : ClassName
                  , args : List TyArg
                  , supers : List ClassConstraint }

record ClassConstraint = { class : ClassRef, args : List TyArg }

record InstanceClause = { head : Constraint, body : List Constraint }

prod Derive = Constraint

record Constraint = { class : ClassRef, args : List Ty }

sum ClassRef = Local ClassName | Foreign ModuleName ClassName

record Module = { name : ModuleName
                , tyDefs : Map TyName TyDef
                , classDefs : Map ClassName ClassDef
                , ruleImports : Set ModuleName
                , instanceClauses : List InstanceClause
                , derives : List Derive }

record CompilerInput = { modules : Map ModuleName Module }

prod TyName = Text

prod VarName = Text

prod ConstrName = Text

prod FieldName = Text

prod ModuleName = (List ModuleNamePart)

prod ModuleNamePart = Text

prod ClassName = Text