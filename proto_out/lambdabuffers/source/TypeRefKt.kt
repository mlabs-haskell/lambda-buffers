//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: repls/lambdabuffers-source.proto

package lambdabuffers.source;

@kotlin.jvm.JvmSynthetic
public inline fun typeRef(block: lambdabuffers.source.TypeRefKt.Dsl.() -> kotlin.Unit): lambdabuffers.source.LambdabuffersSource.TypeRef =
  lambdabuffers.source.TypeRefKt.Dsl._create(lambdabuffers.source.LambdabuffersSource.TypeRef.newBuilder()).apply { block() }._build()
public object TypeRefKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: lambdabuffers.source.LambdabuffersSource.TypeRef.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: lambdabuffers.source.LambdabuffersSource.TypeRef.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): lambdabuffers.source.LambdabuffersSource.TypeRef = _builder.build()

    /**
     * <code>.lambdabuffers.source.LocalTypeRef local_type_ref = 1;</code>
     */
    public var localTypeRef: lambdabuffers.source.LambdabuffersSource.LocalTypeRef
      @JvmName("getLocalTypeRef")
      get() = _builder.getLocalTypeRef()
      @JvmName("setLocalTypeRef")
      set(value) {
        _builder.setLocalTypeRef(value)
      }
    /**
     * <code>.lambdabuffers.source.LocalTypeRef local_type_ref = 1;</code>
     */
    public fun clearLocalTypeRef() {
      _builder.clearLocalTypeRef()
    }
    /**
     * <code>.lambdabuffers.source.LocalTypeRef local_type_ref = 1;</code>
     * @return Whether the localTypeRef field is set.
     */
    public fun hasLocalTypeRef(): kotlin.Boolean {
      return _builder.hasLocalTypeRef()
    }

    /**
     * <code>.lambdabuffers.source.ForeignTypeRef foreign_type_ref = 2;</code>
     */
    public var foreignTypeRef: lambdabuffers.source.LambdabuffersSource.ForeignTypeRef
      @JvmName("getForeignTypeRef")
      get() = _builder.getForeignTypeRef()
      @JvmName("setForeignTypeRef")
      set(value) {
        _builder.setForeignTypeRef(value)
      }
    /**
     * <code>.lambdabuffers.source.ForeignTypeRef foreign_type_ref = 2;</code>
     */
    public fun clearForeignTypeRef() {
      _builder.clearForeignTypeRef()
    }
    /**
     * <code>.lambdabuffers.source.ForeignTypeRef foreign_type_ref = 2;</code>
     * @return Whether the foreignTypeRef field is set.
     */
    public fun hasForeignTypeRef(): kotlin.Boolean {
      return _builder.hasForeignTypeRef()
    }

    /**
     * <code>.lambdabuffers.source.SourceInfo source_info = 3;</code>
     */
    public var sourceInfo: lambdabuffers.source.LambdabuffersSource.SourceInfo
      @JvmName("getSourceInfo")
      get() = _builder.getSourceInfo()
      @JvmName("setSourceInfo")
      set(value) {
        _builder.setSourceInfo(value)
      }
    /**
     * <code>.lambdabuffers.source.SourceInfo source_info = 3;</code>
     */
    public fun clearSourceInfo() {
      _builder.clearSourceInfo()
    }
    /**
     * <code>.lambdabuffers.source.SourceInfo source_info = 3;</code>
     * @return Whether the sourceInfo field is set.
     */
    public fun hasSourceInfo(): kotlin.Boolean {
      return _builder.hasSourceInfo()
    }
    public val typeRefCase: lambdabuffers.source.LambdabuffersSource.TypeRef.TypeRefCase
      @JvmName("getTypeRefCase")
      get() = _builder.getTypeRefCase()

    public fun clearTypeRef() {
      _builder.clearTypeRef()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun lambdabuffers.source.LambdabuffersSource.TypeRef.copy(block: lambdabuffers.source.TypeRefKt.Dsl.() -> kotlin.Unit): lambdabuffers.source.LambdabuffersSource.TypeRef =
  lambdabuffers.source.TypeRefKt.Dsl._create(this.toBuilder()).apply { block() }._build()
