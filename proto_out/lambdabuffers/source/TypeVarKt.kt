//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: repls/lambdabuffers-source.proto

package lambdabuffers.source;

@kotlin.jvm.JvmSynthetic
public inline fun typeVar(block: lambdabuffers.source.TypeVarKt.Dsl.() -> kotlin.Unit): lambdabuffers.source.LambdabuffersSource.TypeVar =
  lambdabuffers.source.TypeVarKt.Dsl._create(lambdabuffers.source.LambdabuffersSource.TypeVar.newBuilder()).apply { block() }._build()
public object TypeVarKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: lambdabuffers.source.LambdabuffersSource.TypeVar.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: lambdabuffers.source.LambdabuffersSource.TypeVar.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): lambdabuffers.source.LambdabuffersSource.TypeVar = _builder.build()

    /**
     * <code>.lambdabuffers.source.VarName var_name = 1;</code>
     */
    public var varName: lambdabuffers.source.LambdabuffersSource.VarName
      @JvmName("getVarName")
      get() = _builder.getVarName()
      @JvmName("setVarName")
      set(value) {
        _builder.setVarName(value)
      }
    /**
     * <code>.lambdabuffers.source.VarName var_name = 1;</code>
     */
    public fun clearVarName() {
      _builder.clearVarName()
    }
    /**
     * <code>.lambdabuffers.source.VarName var_name = 1;</code>
     * @return Whether the varName field is set.
     */
    public fun hasVarName(): kotlin.Boolean {
      return _builder.hasVarName()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun lambdabuffers.source.LambdabuffersSource.TypeVar.copy(block: lambdabuffers.source.TypeVarKt.Dsl.() -> kotlin.Unit): lambdabuffers.source.LambdabuffersSource.TypeVar =
  lambdabuffers.source.TypeVarKt.Dsl._create(this.toBuilder()).apply { block() }._build()
