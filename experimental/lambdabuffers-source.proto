// Run with: protoc --plugin=protoc-gen-haskell=`which proto-lens-protoc`  --haskell_out=proto_out repls/lambdabuffers-source.proto
syntax = "proto3";

package lambdabuffers.source;

/* Frontend Source information

data SourceInfo = SourceInfo {
  file :: FilePath,
  posFrom :: SourcePosition,
  posTo :: SourcePosition
}

data SourcePosition = SourcePosition {
  column :: Integer,
  row :: Integer
}
*/

message SourceInfo {
  string file = 1;
  SourcePosition pos_from = 2;
  SourcePosition pos_to = 3;
}

message SourcePosition {
  int32 column = 1;
  int32 row = 2;
}

/* Type

data Ty = TyVar VarName | TCon TKind | TApp Ty Ty | TyRef TypeRef

newtype TKind = TKind [VarName]

data TypeRef = Local TyConName | Foreign ModuleName TyConName

*/

message Type {
  oneof type {
     TypeVar type_var = 1;
     TypeCon type_con = 2;
     TypeApp type_app = 3;
     TypeRef type_ref = 4;
  }
  SourceInfo source_info = 5;
}

message Kind {  
  repeated string VarName = 1;
  SourceInfo source_info = 2;
}

message TypeVar {
  VarName var_name = 1;
  SourceInfo source_info = 2;
}

message TypeCon {
  Kind kind = 1;
  SourceInfo source_info = 2;
}

message TypeApp {
  Type type_abs = 1;
  Type type_arg = 2;
  SourceInfo source_info = 3;
}

message TypeRef {  oneof type_ref {
    LocalTypeRef local_type_ref = 1;
    ForeignTypeRef foreign_type_ref = 2;
  }
  SourceInfo source_info = 3;
}

message LocalTypeRef {
  TypeConName type_con_name = 1;
  SourceInfo source_info = 2;
}

message ForeignTypeRef {
  ModuleName module_name = 1;
  TypeConName type_con_name = 2;
  SourceInfo source_info = 3;
}

/* Names

type ModuleName = Text
type TypeConName = Text
type ConstrName = Text
type VarName = Text
type FieldName = Text
type TypeclassName = Text
*/

message TypeConName {
  string name = 1;
  SourceInfo source_info = 2;
}

message ModuleName {
  string name = 1;
  SourceInfo source_info = 2;
}

message VarName {
  string name = 1;
  SourceInfo source_info = 2;
}

message ConstrName {
  string name = 1;
  SourceInfo source_info = 2;
}

message FieldName {
  string name = 1;
  SourceInfo source_info = 2;
}

message TypeclassName {
  string name = 1;
  SourceInfo source_info = 2;
}

/* Type definition

data TyDef = TyDef
  { tyDefName :: TyConName,
    tyDefKind :: TKind,
    tyDefBody :: TyBody
  }

*/
message TypeDefinition {
  TypeConName type_name = 1;
  Kind type_kind = 2;
  TypeBody type_body = 3;
  SourceInfo source_info = 4;
}

/* Type body

data TyBody = Opaque | Sum (Map ConstrName Product)
*/
message TypeBody {
  oneof body {
    Opaque opaque = 1;
    Sum sum = 2;
  };
  SourceInfo source_info = 3;
}

message Opaque {
  SourceInfo source_info = 1;
}

message Sum {
  // Should be <ConstrName, Product>
  map<string, Product> constructors = 1; // NOTE(lameness): Key in map fields cannot be float/double, bytes or message types.
  SourceInfo source_info = 2;
}

// data Product = Record (Map FieldName Ty) | NTuple [Ty] | Empty
message Product {
  oneof product {
    Empty empty = 1;
    Record record = 2;
    NTuple ntuple = 3;
  }
  SourceInfo source_info = 4;
}

message Empty {
  SourceInfo source_info = 1;
}

message Record {
  // Should be map<FieldName, Type>
  map<string, Type> fields = 1; // NOTE(lameness): Key in map fields cannot be float/double, bytes or message types.
  SourceInfo source_infog = 2;
}

message NTuple {
  repeated Type fields = 1;
  SourceInfo source_info = 2;
}

/* Typeclasses and instances

data TypeclassDef = TypeclassDef {
  tcName :: TypeclassName,
  tcDocumentation :: Text
}

data InstanceClause = InstanceClause
  { icClassName :: TypeclassName,
    icHead :: Ty,
    icBody :: [Constraint]
  }

data Constraint = Constraint
  { cClassName :: TypeclassName,
    cArguments :: [Ty]
  }
*/

message TypeclassDef {
  TypeclassName typeclass_name = 1;
  string documentation = 2;
  SourceInfo source_info = 3;
}

message InstanceClause {
  TypeclassName typeclass_name = 1;
  Type head = 2;
  repeated Constraint constraints = 3;
  SourceInfo source_info = 4;
}

message Constraint {
  // This is naive and probably wrong
  TypeclassName typeclass_name = 1;
  repeated Type arguments = 2;
  SourceInfo source_info = 3;
}

/* Module

data Module = Module  { 
    moduleName :: ModuleName,
    moduleDefs :: [TyDef],
    moduleInstances :: [InstanceClause]
  }

*/

message Module {
  ModuleName module_name = 1;
  repeated TypeDefinition type_defs = 2;
  repeated InstanceClause instances = 3;
  SourceInfo source_info = 4;
}

/* Source

Source is a fully self contained list of modules, the entire compilation closure.

data Source = Source [Module]
*/

message Source {
  repeated Module modules = 1;
}